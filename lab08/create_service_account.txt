
// Log into the node1 (master) and create a private key
1. openssl genrsa -out developer.key 2048

// Create a new certificate signing request
2. openssl req -new -key developer.key -out developer.csr -subj "/CN=developer"


3. Create a certificate signing request

// Create CSR
cat <<EOF | kubectl create -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: developer.default
spec:
  groups:
  - system:authenticated
  signerName: kubernetes.io/kube-apiserver-client
  request: $(cat developer.csr | base64 | tr -d '\n')
  usages:
  - client auth
EOF

// Approve the CSR
4. kubectl certificate approve developer.default

// Get certificate content
5. kubectl get csr developer.default -o jsonpath='{.status.certificate}' | base64 --decode > developer-client-certificate.crt


6. Create the role

cat <<EOF | kubectl create -f -
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: developer
rules:
- apiGroups: ["", "extensions", "apps"]
  resources: ["deployments", "replicasets", "pods"]
  verbs: ["get", "list"]
EOF

7. Create role binding

cat <<EOF | kubectl create -f -
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: developer-binding
  namespace: default
subjects:
- kind: User
  name: developer
  apiGroup: ""
roleRef:
  kind: Role
  name: developer
  apiGroup: ""
EOF

// Set user credentials
8. kubectl config set-credentials developer --client-certificate=developer-client-certificate.crt --client-key=developer.key --embed-certs=true

// Create context
9. kubectl config set-context developer-context --cluster=cluster.local --namespace=default --user=developer

// Change context
10. kubectl config use-context developer-context

11. kubectl get nodes // it should fail

12. kubectl get pods // it should work
